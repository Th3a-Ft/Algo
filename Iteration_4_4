int[] tableau;
int x=0;
int mine_proche=0;
int pos=0;

void setup() {
  initBoard(10, 3);
  isAMine();
  getMines();
  affichage();
}

void initBoard(int nbre_ligne, int nbre_mine) {
  tableau=new int[nbre_ligne];

  while (x<nbre_mine) {                               //tant que x est inf à nbre_mine alors la boucle continue
    int pos_mine=int(random(nbre_ligne));            //renvoi une position aléatoire
    if (tableau[pos_mine]!=99) {
      tableau[pos_mine]=99;                         //remplace la position aléatoire obtenue par 99
      x++;                                         //si une case minée alors x+1 jusqu'à x=3 et la boucle s'arrête
    }
  }
  // println(tableau);
}

void isAMine() {
  if (tableau[pos]==99) {
    //println("Mine");
  } else {
    // println("Pas une mine");
  }
}

int getMines() {
  boolean D_Mine = (pos > 0 && tableau[pos-1] ==99);
  boolean G_Mine = (pos < tableau.length-1 && tableau[pos+1]==99);
  if (G_Mine && D_Mine) {
    return 2;                                     //Si une mine à gauche et à droite alors return 2
  } else if (G_Mine || D_Mine) {
    return 1;                                    //Si une mine à gauche ou à droite alors return 1
  } else {
    return 0;                                    //Si pas de mine à gauche ou à droite alors return 0
  }
}

void affichage() {                                 //Affiche les X si mine ou Pas une mine
  for (; pos<tableau.length; pos++) {
    if (tableau[pos]!=99) {
      println(getMines());
    } else {
      println("X");
    }
  }
}
